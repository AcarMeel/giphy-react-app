{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","handleAdd","useState","newCategory","setNewCategory","onSubmit","e","preventDefault","type","onChange","target","value","disabled","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gif","GifExpertApp","categories","setCategories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA8BeA,EA3BK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACCC,mBAAS,IADV,mBAC9BC,EAD8B,KACjBC,EADiB,KAOrC,OACE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFN,EAAUE,GACVC,EAAe,KAJnB,UAOE,uBAAOI,KAAK,OAAOC,SAZF,SAACH,GACpBF,EAAeE,EAAEI,OAAOC,QAWqBA,MAAOR,IAClD,wBAAQS,UAAWT,GAA+B,KAAhBA,EAAoBK,KAAK,SAA3D,wB,+BCnBOK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGAA,EAAIC,OAHJ,cAGbC,EAHa,OAIbC,EAAOD,EAAKA,KAAKE,KAAI,SAAAC,GAAG,YAAK,CAC/BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAPnB,kBASZM,GATY,2CAAH,sDCWLO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,sBAAKc,UAAU,yCAAf,UACE,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCcXO,EAhBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACZZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OARAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAX,GAAM,OAAIS,EAAS,CACrBf,KAAMM,EACNO,SAAS,SAEd,CAACpB,IAEGqB,EDZkBI,CAAazB,GAA9BO,EADsB,EACtBA,KAAMa,EADgB,EAChBA,QAEd,OACI,qCACI,6BAAKpB,IACL,sBAAKgB,UAAU,YAAf,UACMI,GAAW,2CACZb,GAAQA,EAAKE,KAAI,SAAAiB,GAAG,OACjB,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,cEe3BgB,EAxBM,WAAO,IAAD,EACWvC,mBAAS,CAC3C,QACA,UACA,aAJuB,mBAClBwC,EADkB,KACNC,EADM,KAYzB,OACE,qCACE,gDACA,uBACA,cAAC,EAAD,CAAa1C,UATC,SAACE,GACZA,GAA+B,KAAhBA,GACpBwC,EAAc,CAACxC,GAAF,mBAAkBuC,QAQ5BA,EAAWnB,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,EAAlC,SAA6CA,GAA/BA,UCVT8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b3dad002.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ handleAdd }) => {\n  const [newCategory, setNewCategory] = useState(\"\");\n\n  const handleChange = (e) => {\n    setNewCategory(e.target.value);\n  };\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        handleAdd(newCategory);\n        setNewCategory(\"\");\n      }}\n    >\n      <input type=\"text\" onChange={handleChange} value={newCategory} />\n      <button disabled={!newCategory || newCategory === \"\"} type=\"submit\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  handleAdd: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=0iR0GLIyJG5THTLPg9qfwadowPuhyEN3&q=${encodeURI(category)}&limit=10`;\n    const res = await fetch(url);\n    const data = await res.json();\n    const gifs = data.data.map(img => ({\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url \n    }));\n    return gifs;\n}","import React from \"react\";\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <p>{title}</p>\n      <img src={url} alt={title} />\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n    const { data, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            <div className=\"card-grid\">\n                { loading && <p>Loading...</p>}\n                {data && data.map(gif => (\n                    <GifGridItem key={gif.id} {...gif} />\n                ))}\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n        .then(images => setState({\n            data: images,\n            loading: false\n        }));\n    }, [category]);\n\n    return state;\n}","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\n    \"Stars\",\n    \"Flowers\",\n    \"Cupcakes\",\n  ]);\n\n  const handleAdd = (newCategory) => {\n    if (!newCategory || newCategory === \"\") return;\n    setCategories([newCategory, ...categories]);\n  };\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <hr />\n      <AddCategory handleAdd={handleAdd} />\n      {categories.map((category) => (\n          <GifGrid key={category} category={category}>{category}</GifGrid>\n      ))}\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}